{"version":3,"sources":["pages/AddQuote.module.css","components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/AddQoute.jsx"],"names":["module","exports","Card","props","className","classes","card","children","validateEmpty","value","trim","length","QuoteForm","authorInputRef","useRef","textInputRef","useState","formFocus","setFormFocus","requiredField","setRequiredField","fieldFocusHandler","event","when","message","location","onFocus","form","onSubmit","preventDefault","enteredAuthor","current","enteredText","validAuthor","validText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","filedRequired","control","htmlFor","type","id","ref","error","rows","actions","onClick","AddQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","main","quote"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,yB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2BAA2B,cAAgB,iCAAiC,MAAQ,2B,0GCK1MC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCIxCC,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,OAAS,GAqEtCC,EAnEG,SAACT,GACjB,IAAMU,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAkCE,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAoBA,IAAMC,EAAoB,SAACC,GACzBF,GAAiB,IAYnB,OACE,eAAC,WAAD,WACA,cAAC,IAAD,CAAQG,KAAMN,EAAWO,QAAU,SAACC,GAAD,MACjC,4DAEF,cAAC,EAAD,UACE,uBAAMC,QAXe,WACvBR,GAAa,IAUsBd,UAAWC,IAAQsB,KAAMC,SArC9D,SAA2BN,GACzBA,EAAMO,iBACN,IAAMC,EAAgBjB,EAAekB,QAAQtB,MACvCuB,EAAcjB,EAAagB,QAAQtB,MAEnCwB,EAAczB,EAAcsB,GAC5BI,EAAY1B,EAAcwB,GAEdC,GAAeC,EAOjC/B,EAAMgC,WAAW,CAAEC,OAAQN,EAAeO,KAAML,IAJ9CZ,GAAiB,IA0BjB,UACGjB,EAAMmC,WACL,qBAAKlC,UAAWC,IAAQkC,QAAxB,SACE,cAACC,EAAA,EAAD,MAGHrB,GAAiB,mBAAGf,UAAWC,IAAQoC,cAAtB,sCAClB,sBAAKrC,UAAWC,IAAQqC,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKjC,EAAgBa,QAASL,EAAmBjB,UAAWe,EAAgBd,IAAQ0C,MAAQ,QAE7H,sBAAK3C,UAAWC,IAAQqC,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOG,KAAK,IAAIF,IAAK/B,EAAcW,QAASL,EAAmBjB,UAAWe,EAAgBd,IAAQ0C,MAAQ,QAEzH,qBAAK3C,UAAWC,IAAQ4C,QAAxB,SACE,wBAAQC,QA/BiB,WAC/BhC,GAAa,IA8BoCd,UAAU,MAArD,kC,gBCvCK+C,UArBE,WACf,MAA+BC,YAAQC,KAAU,GAAzCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACM,cAAXH,GACDC,EAAQG,KAAK,aAEd,CAACJ,EAAQC,IAMZ,OACE,sBAAMpD,UAAWC,IAAQuD,KAAzB,SACE,cAAC,EAAD,CAAWtB,UAAsB,YAAXiB,EAAsBpB,WANxB,SAAA0B,GACtBP,EAAYO","file":"static/js/4.629df43a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"AddQuote_main__v2H1a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\",\"filedRequired\":\"QuoteForm_filedRequired__2cxGh\",\"error\":\"QuoteForm_error__1NvQc\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import {Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst validateEmpty = value => value.trim().length > 0;\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [formFocus, setFormFocus] = useState(false);\n  const [requiredField, setRequiredField] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n    // Vlaidate fields, could not be empty.\n    const validAuthor = validateEmpty(enteredAuthor);\n    const validText = validateEmpty(enteredText);\n    \n    const validForm = validAuthor && validText;\n\n    if(!validForm){\n      setRequiredField(true);\n      return;\n    }\n    \n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const fieldFocusHandler = (event) => {\n    setRequiredField(false);\n  }\n\n  const formFocusFineshedHandler = () => {\n    setFormFocus(false);\n  }\n\n  const formFocusHandler = () => {\n    setFormFocus(true);\n\n  }\n\n  return (\n    <Fragment>\n    <Prompt when={formFocus} message={ (location) => \n      'Are you sure you want to leave? Some Data can be lost.'\n    } />\n    <Card>\n      <form onFocus={formFocusHandler} className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n        {requiredField && <p className={classes.filedRequired}>All fields are required.</p>}\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} onFocus={fieldFocusHandler} className={requiredField ? classes.error : ''} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef} onFocus={fieldFocusHandler} className={requiredField ? classes.error : ''} ></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={formFocusFineshedHandler} className='btn'>Add Quote</button>\n        </div>\n      </form>\n    </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classes from './AddQuote.module.css';\nimport QuoteForm from '../components/quotes/QuoteForm';\n\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../libs/api'\n \nconst AddQuote = () => {\n  const { sendRequest, status} = useHttp(addQuote, false);\n  const history = useHistory();\n\n  useEffect(() => {\n    if(status === 'completed'){\n      history.push('/quotes');\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = quote => {\n    sendRequest(quote);\n  }\n\n  return (\n    <main className={classes.main}>\n      <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\n    </main>\n  )\n};\n\nexport default AddQuote;"],"sourceRoot":""}